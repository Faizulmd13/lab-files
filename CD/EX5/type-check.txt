//type-check.c


#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, i, k, flag = 0;
    char vari[15], typ[15], b[50], c;

    printf("Enter the number of variables: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("Enter the variable[%d]: ", i);
        scanf(" %c", &vari[i]);
        printf("Enter the variable-type[%d] (float-f, int-i): ", i);
        scanf(" %c", &typ[i]);
        if (typ[i] == 'f')
            flag = 1;  // marks that we have float variables
    }

    printf("Enter the Expression (end with $): ");
    i = 0;
    getchar(); // consume leftover newline
    while ((c = getchar()) != '$') {
        b[i] = c;
        i++;
    }
    k = i;

    // check if expression contains division
    for (i = 0; i < k; i++) {
        if (b[i] == '/') {
            flag = 1;
            break;
        }
    }

    for (i = 0; i < n; i++) {
        if (b[0] == vari[i]) {
            if (flag == 1) {
                if (typ[i] == 'f') {
                    printf("\nThe datatype is correctly defined..!\n");
                } else {
                    printf("Identifier %c must be a float type..!\n", vari[i]);
                }
            } else {
                printf("\nThe datatype is correctly defined..!\n");
            }
            break;
        }
    }

    return 0;
}


Execution:
gcc type-check.c -o type
./type


--------------------------------------------------------------------------------

//typecheck.l


%{
#include "y.tab.h"
#include <stdio.h>
%}

%%

[0-9]+              { return NUMBER; }
[a-zA-Z]            { yylval.id = yytext[0]; return ID; }
"int"               { return INT; }
"float"             { return FLOAT; }
\n                  { return '\n'; }          /* send newline to parser */
[\t ]+              ;                         /* ignore spaces and tabs */
.                   { return yytext[0]; }

%%

int yywrap() { return 1; }




//typecheck.y


#include <string.h>

int yylex(void);   
void yyerror(const char *s);
int symbol_type[26];   // store variable type: 0=int, 1=float
%}


%union {
    int type;   // 0=int, 1=float
    char id;
}

%token <id> ID
%token INT FLOAT
%token NUMBER
%type <type> exp type decl

%left '+' '-'
%left '*' '/'
%left UMINUS

%%

program:
      decls exp '\n'   { printf("Expression type: %s\n", $2==1 ? "float" : "int"); }
    ;

decls:
      decls decl
    | /* empty */
    ;

decl:
      type ID '\n' {
            symbol_type[$2 - 'a'] = $1;  // assign type to variable
      }
    ;

type:
      INT   { $$ = 0; }
    | FLOAT { $$ = 1; }
    ;

exp:
      exp '+' exp   { $$ = ($1==1 || $3==1) ? 1 : 0; }
    | exp '-' exp   { $$ = ($1==1 || $3==1) ? 1 : 0; }
    | exp '*' exp   { $$ = ($1==1 || $3==1) ? 1 : 0; }
    | exp '/' exp   { $$ = 1; }   /* division always float */
    | '-' exp %prec UMINUS { $$ = $2; }
    | ID   { $$ = symbol_type[$1 - 'a']; }
    | NUMBER { $$ = 0; }   /* assume number literals are int */
    | '(' exp ')' { $$ = $2; }
    ;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main() {
    printf("Enter declarations (int/float x) then expression:\n");
    yyparse();
    return 0;
}


Execution:
yacc -d typecheck.y
lex typecheck.l
gcc y.tab.c lex.yy.c -o typecheck -lfl
./typecheck
