//expr.l



%{
 #include "y.tab.h"
%}

%%
[a-zA-Z][a-zA-Z0-9]*   return id;
[0-9]+                 return num;
[+\-*/]                return op;
=                      return '=';
;                      return ';';
[ \t]                  ;   // ignore spaces and tabs
\n                     return 0;
.                      return yytext[0];
%%

int yywrap()
{
  return 1;
}



//expr.y



%{
#include <stdio.h>
#include <stdlib.h>

int yylex(void);
int yyerror(const char *msg);
int valid = 1;
%}

%token num id op

%%

start : id '=' s ';'
      ;

s : id x
  | num x
  | '-' num x
  | '(' s ')' x
  ;

x : op s
  | '-' s
  | /* empty */
  ;

%%

int yyerror(const char *msg)
{
    valid = 0;
    printf("\nInvalid expression");
    return 0;
}

int main()
{
    printf("\nEnter the expression:\n");
    yyparse();
    if (valid)
    {
        printf("\nValid expression!\n");
    }
    return 0;
}


Execution:
yacc -d expr.y
lex expr.l
gcc y.tab.c lex.yy.c -o expr -lfl
./expr
